{{!-- <nav>
  <ul>
    <li> <a href="/auth/profile">Profile</a>
    </li>
    <li><a href="/auth/logout">Logout</a></li>
    </li>
  </ul>
</nav> --}}
<h2>Create New Plan</h2>

<div class="box">
  <h2>Create your Plan</h2>

  <form action="/auth/createPlan" method="POST" id="form-container">

    <div class="boxFormMap">
      <label for="title">title</label>
      <input id="title" type="text" name="title" placeholder="title" value="hola"></div>
    <div class="boxFormMap">
      <label for="maxVotes">MaxVotes</label>
      <input id="maxVotes" type="number" name="maxVotes" placeholder="maxVotes" value="8"></div>
    <div>
      <input id="votedYes" type="hidden" name="votedYes" placeholder="votedYes" value="0"></div>
    <input id="votedNo" type="hidden" name="votedNo" placeholder="votedNo" value="0">
</div>
<input id="comments" type="hidden" name="comments" placeholder="comments" value=""></div>

<div class="boxFormMap">
  <label for="city">Name</label>
  <input id="city" type="text" name="city" placeholder="city" value="madrid"></div>

<div class="boxFormMap">
  <label for="date">date</label>
  <input id="date" type="date" name="date" placeholder="date"></div>

<div class="boxFormMap">
  <label for="time">time</label>
  <input id="time" type="time" name="time" placeholder="time" value="22:30"></div>
<div>
  <label for="search">Search Location</label>
  <input id="pac-input" class="controls" type="text" placeholder="Search Box" name="address">
</div>

<div class="boxFormMap">
  <label for="Price">Price</label>
  <input id="Price" type="number" name="Price" placeholder="Price" value="50"></div>
<div class="boxFormMap">
  {{!-- <label for="latitude">Latitude</label>
      <input type="text" name="latitude" placeholder="latitude" value="" id="lat" >
      <label for="longitude">Longitude</label>
  <input type="text" name="longitude" placeholder="longitude" value="" id="lng"  > --}}
</div>

<div class="boxFormMap">
  <label for="email">invite</label>
  <input id="myEmail" type="email" name="email" placeholder="email" value="carlos@riverette.com"></div>




{{#if message }}
<div class="error-message">{{ message }}</div>
{{/if}}

<button type="submit">Create plan and Enjoy!!</button>

</form>






</div>
<br><br><br><br>
<div class="map-wrapper">
  {{!-- <input id="pac-input" class="controls" type="text" placeholder="Search Box"> --}}
  <div id="map">

  </div>
</div>
<script>
  // This example adds a search box to a map, using the Google Place Autocomplete
  // feature. People can enter geographical searches. The search box will return a
  // pick list containing a mix of places and predicted search terms.

  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  function initAutocomplete() {
    var map = new google.maps.Map(document.getElementById('map'), {
      center: { lat: 40.4165000, lng: -3.7025600 },
      zoom: 13,
      mapTypeId: 'roadmap'
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    { { !--map.controls[google.maps.ControlPosition.TOP_LEFT].push(input); --} }

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function () {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function () {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function (marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function (place) {
        if (!place.geometry) {
          console.log("Returned place contains no geometry");
          return;
        }
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
  }

</script>